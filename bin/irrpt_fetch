#!/usr/bin/env php
<?php

/* Include the necessary configuration files */
define(__CURRDIR__, dirname(realpath(__FILE__)));

require_once(__CURRDIR__."/../inc/irrquery.inc");
require_once(__CURRDIR__."/../inc/irrpt.inc");
require_once(__CURRDIR__."/../inc/cvs.inc");
require_once(__CURRDIR__."/../inc/status.inc");
require_once(__CURRDIR__."/../inc/ipv6.inc");
require_once(__CURRDIR__."/../inc/tmpfile.inc");
require_once(__CURRDIR__."/../inc/exclusions.inc");

/* Load the base config */
$cfg = include(__CURRDIR__."/../conf/irrpt.conf");

/* Setting the basic Options */
$o_asn		= 0;			/* Default ASN to fetch: all */
$o_verbose  = 0;			/* Default to verbose off */
$o_4 		= 0; 			/* Default to fetch both v4 and v6 by setting this to 0 */
$o_6 		= 0; 			/* Default to fetch both v4 and v6 by setting this to 0 */
$o_quiet	= 0;			/* Default to disable Quiet-Mode */
$o_cvs		= 1;			/* Default to enable CVS */
$o_irrdb	= null;
$o_irrdbConf= [];

/* Open our IRRQuery class */
$irr		= new IRRQuery;

/* Open our CVS class */
$cvs		= new CVS($cfg);		

/* Setting Count and offset to default/zero */
$count		= 0;
$offset		= 0;

/**
 * Loading the IRRDB-Config File
 *
 * @param array $cfg
 * @param array $o_irrdbConf
 * @param boolean $o_quiet
 * @param string $o_irrdbfile
 * 
 * @return void
 */
function load_irrdb(&$cfg, &$o_irrdbConf, $o_quiet, $o_irrdbfile) 
{
    $count	= 0;

    // Load the IRRDB file and store entries into a hash
    if (!($irrdb = fopen($cfg['cfgfiles']['irrdb_list'], "r"))) {
		status(STATUS_ERROR, "Unable to open irrdb config file, aborting.");
		exit(-1);
    }

    /* Parse the IRRDB config file */
    while( !feof($irrdb) ) {
		$line 		= rtrim(fgets($irrdb, 256));

		/* Skip comments and junk lines */
		if ((strlen($line) == 0) || ($line[0] == "#"))
			continue;

		/* Skip lines that do not start with a number */
		if( ! preg_match("/^[\d+]/", $line) )
			continue;

		$results	= preg_split( "/[ \t]+/", $line);
		$asNumber	= $results[0];
		$object		= $results[1];

		if( isset($results[2]) && filter_var($results[2], FILTER_VALIDATE_EMAIL) ) {
			$email	= $results[2]; //email is optional in the config
		}
		else {
			$email	= NULL;
		}

		$asString = "AS" . $asNumber;

		$count++;

		if( ! isset($o_irrdbConf[$asNumber]) ) {
			$o_irrdbConf[$asNumber]['asn']		= $asNumber;
			$o_irrdbConf[$asNumber]['email']	= $email;
			$o_irrdbConf[$asNumber]['object']	= $object;
		}
    }
    fclose($irrdb); 
}

/********** PROCESSING STARTS HERE *********/


/* Set UID specified in the config file */
if (posix_geteuid() == 0) {
	if ($cfg['fetch']['set_uid']) {
		if (!($user = posix_getpwnam($cfg['fetch']['set_uid'])))
			$user = posix_getpwuid($cfg['fetch']['set_uid']);

		if (!$user) {
			status(STATUS_ERROR, "Unable to change to the specified UID, aborting.");
			exit(1);
		}

		posix_setuid($user['uid']);
		posix_seteuid($user['uid']);
	}
}

// disable cvs tracking per config file option 
if ($cfg['tools']['nocvs']) {
  $o_cvs = 0;
}

/* Parse through the cmdline options. */
for ($offset = 1; $offset < $_SERVER['argc']; $offset++) {
	if (substr($_SERVER['argv'][$offset], 0, 1) != "-")
		break;

	switch($_SERVER['argv'][$offset]) {
	    case "-h":
	    case "--help":
			printf("Usage: %s [-h46qv] [-f file] [--nocvs] [object]\n", $_SERVER['argv'][0]);
			exit(1);
	    case "-q":
	    case "--quiet":
			$o_quiet = 1;
			break;
	    case "-v":
	    case "--verbose":
			$o_verbose = 1;
			break;
	    case "--nocvs":
			$o_cvs = 0;
			break;
	    case "-4":
	    case "--4":
			$o_4 = 1;
			break;
	    case "-6":
	    case "--6":
			$o_6 = 1;
			break;
	    case "-f":
	    case "--file":
			$o_irrdb = $_SERVER['argv'][$offset+1];
			$offset++;
			break;
	}
}

/* Set Timezone */
date_default_timezone_set($cfg['global']['timezone']);

/* Set Memory Limit */
ini_set("memory_limit",$cfg['global']['memory_limit']);

/* Open the file with the list of IRR objects we will be tracking
 * provided via command line or through the config file
 */
if( $o_irrdb ) {
  $cfg['cfgfiles']['irrdb_list'] = $o_irrdb;
}

/* Check if Config-File is executable, Run this Script and save the data to a temporary file
 * and uses this as source.
 * This will ensure to save memory in large environments.
 */
if(is_executable($cfg['cfgfiles']['irrdb_list'])) {
	exec($cfg['cfgfiles']['irrdb_list'], $scriptOutput, $returnVar);
	if($returnVar == 0) {
		$temp = new TempFile('irrpt');
		$tempFile = fopen($temp->path, 'w');
		fputs($tempFile, implode(PHP_EOL, $scriptOutput));
		fclose($tempFile);

		$cfg['cfgfiles']['irrdb_list'] = $temp->path;
	}
}
load_irrdb($cfg, $o_irrdbConf, $o_quiet,$cfg['cfgfiles']['irrdb_list']);

/* Establish a connection with our IRR Query whois server */
if ($irr->connect($cfg['fetch']['host'], $cfg['fetch']['port']) == FALSE) {
	status(STATUS_ERROR, "Unable to connect to IRR Query whois server " . 
	       $cfg['fetch']['host'] . ", aborting.");
	exit(-1);
}

/* Optionally enable a local cache of prefixes per aut-num record */
if ($cfg['fetch']['cache']) {
	$irr->set_cache(true);
}

/* If we don't want to query all IRR sources, set the new sources now */
if ($cfg['fetch']['sources'] != "all") {
	$irr->set_sources($cfg['fetch']['sources']);
}

/* check AS parameter if provided */
if( isset($_SERVER['argv'][$offset+0]) ) {
	if( preg_match("/^AS./i", $_SERVER['argv'][$offset+0]) ) {
		/* MATCH: Object listed as AS12345 or AS-ALPHATEST */
		$asString = strtoupper($_SERVER['argv'][$offset+0]);
		$object	  = $asString;

		$asNumber = preg_replace("/[aA][sS]/", "", $asString);
		if ( !is_numeric($asNumber) ) {
			$asNumber = $asString;
		}

		$count++;

		/**
		 * NOTE: NOT ENABLED
		 * This section intentionally left out for people who wish
		 * to pull routes for a single ASN, ie: AS12345 instead of 
		 * having it lookup the object ID for AS 12345 which might be
		 * AS-ALPHATEST
		 */ 
		irrpt::process($cvs, $cfg, $asString, $asNumber, $count, $object, $irr, 'none', $o_quiet, $o_4, $o_6, $o_cvs);
	}
	elseif ( is_numeric($_SERVER['argv'][$offset+0]) &&
	    (int)$_SERVER['argv'][$offset+0] > 0
	    && (int)$_SERVER['argv'][$offset+0] <= 4294967295) {

		$asString = "AS" . $_SERVER['argv'][$offset+0];
		$asNumber = $_SERVER['argv'][$offset+0];
		$count++;

		if( isset($o_irrdbConf[$asNumber]['object']) )
		{
			$object	= $o_irrdbConf[$asNumber]['object'];
		} else {
			$object = $asString;
		}
		irrpt::process_as($cvs, $cfg, $asString, $asNumber, $count, $object, $irr, 'none', $o_quiet, $o_4, $o_6, $o_cvs);
	} 
	else {
		status(STATUS_ERROR, "Invalid AS or AS-SET input, aborting.");
		exit(-1);
	}
} 
else {
    /* NOTE: Cycle through array for ASN numbers and their objects */
    status(STATUS_INFO, "Reading irrdbConf array list for ASNs, Objects, Email");
    $count = 0;
    foreach( $o_irrdbConf as $v1 ) {
		$count++;
		foreach( $v1 as $v2 ) {
			$asString	= "AS" . $v1['asn'];
			$asNumber	= $v1['asn'];
			$object		= $v1['object'];
			$email		= $v1['email'];
		}

    	irrpt::process_as($cvs, $cfg, $asString, $asNumber, $count, $object, $irr, $email, $o_quiet, $o_4, $o_6, $o_cvs);
    }
}

if( $o_quiet == 0 ) {
    status(STATUS_INFO, "Completed processing of {$count} IRR object(s).");
}
?>